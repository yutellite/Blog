
uodo从共享内存中获取segment，总共有三大undo共享内存，详细请看《share memory analysis》

+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|GA																												                                                                                                                                      |
|SHM_ID	            POOL_ID	              POOL_NAME     POOL_ID	         POOL_ID	OBJ_COUNT	                    OBJ_SIZE	        EX_MAX	        OBJ_SIZE	                                                                                  |
|g_sys_pools[4]	    GA_PERM_UNDO_POOL	  perm undo     GA_SYS_AREA+5	0x01000005	 KNL_MAX_SESSIONS	            UD_SET_ITEM_SIZE	    0);	        ((sizeof(ud_seg_item_t) - sizeof(seg_segment_t)) + SEG_SEGMENT_SIZE)	                      |
|g_sys_pools[5]	    GA_TEMP_UNDO_POOL	  temp undo     GA_SYS_AREA+6	0x01000006	 KNL_MAX_SESSIONS	            UD_SET_ITEM_SIZE	    0);	        ((sizeof(ud_seg_item_t) - sizeof(seg_segment_t)) + SEG_SEGMENT_SIZE)	                      |
|g_sys_pools[6]	    GA_REP_UNDO_POOL	   rep undo     GA_SYS_AREA+7	0x01000007	 KNL_MAX_SESSIONS	            UD_SET_ITEM_SIZE	    0);	        ((sizeof(ud_seg_item_t) - sizeof(seg_segment_t)) + SEG_SEGMENT_SIZE)	                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

  ga_pool_t
  +----------------------------------+
  |db_char    *pool_name             |
  |db_char    *addr                  |
  |db_char    *object_addr           |
  |ga_pool_ctrl   *ctrl              |
  |ga_object_map_t    *object_map    |
  |db_char    *ex_pool_addr          |
  |           [GM_MAX_EXTENDED_POOLS]|
  |                                  |
  |ga_pool_def_t  def                |
  |         db_uint32 object_count   |
  |         db_uint32 object_size    |
  |         db_uint32 ex_max         |
  |db_ulong   capacity               |
  |db_uint32  ex_attach_count        |
  +----------------------------------+



一、g_sys_area_addr共享内存
实际共享内存创建区域
Such as SHM_ID_SYS_GA share memory
g_sys_area_addr(GA_SYS_POOL_COUNT=15) 15 pools
      +-------------------------------------------+-----------------------+-----------------------+-----------------------+	
      |        |          |       |       |       |                       |                       |                       |
      |offset0 |offset0+1 |       |       |       |                       |                       |       .....           |
      |        |          |       |...    |       |                       |                       |                       |
      |        |          |       |       |       |                       |                       |                       |
      +-------------------------------------------+-----------------------+-----------------------+-----------------------+
g_sys_area_addr                                 pool[0]->addr           pool[1]->addr
pool_offset[0]

      pool[0].addr=g_sys_area_addr+((db_ulong*)g_sys_area_addr)[0]

      +-----------------------+-------+-------+-------+-------+-------+-------+-------+ -------+---------------------------------------------------+
      |                       |     <--- prior|       |       |       |       |       |        |                                                   |
      |                       |       |       |       |       |       |       |       |        |                                                   |
      |                       |       |  next--->     |       |       |       |       |        |                                                   |
      |                       |       |       |       |       |       |       |       |        |                                                   |
      +-----------------------+-------+-------+-------+-------+-------+-------+-------+ -------+---------------------------------------------------+
    pool[0]->ctrl    pool[0]->object_map                                                      pool[0]->object_addr
                              <-----pool[0[->def.object_count*sizeof(ga_object_map_t)---------->

      ga_pool_ctrl_t
      +-------------------------------------------------+
      |cm_spinlock_t   mutex                            |
      |ga_pool_def_t   def                              |->pool[0]->def
      |db_ulong        offset                           |->((db_ulong*)g_sys_area_addr)[0]
      |ga_queue_t      free_objects                     |
      |       db_uint32    count                        |->pool[0]->def.object_count
      |       db_uint32    first                        |->0
      |       db_uint32    last                         |->pool[0]->def.object_count-1
      |                                                 |
      |db_uint32       ex_count                         |
      |db_int32        ex_shm_id[GA_MAX_EXTENDEAD_POOLS]|
      +-------------------------------------------------+
      ga_object_map_t
      +-------------------------------------------------+
      |db_uint32       next                             |
      |db_uint32       prior                            |
      +-------------------------------------------------+

pool->def.object_size=UD_SET_ITEM_SIZE
#define UD_SET_ITEM_SIZE ((sizeof(ud_seg_item_t) - sizeof(seg_segment_t)) + SEG_SEGMENT_SIZE)
#define SEG_SEGMENT_SIZE  (sizeof(seg_segment_t) + (db_uint32)(sizeof(seg_session_map_t) * (KNL_MAX_SESSIONS - 1)) )
UD_SET_ITEM_SIZE=(sizeof(ud_seg_item_t)+(db_uint32)(sizeof(seg_session_map_t) * (KNL_MAX_SESSIONS - 1))

ud_seg_item_t                                           seg_session_map_t
+------------------------------------------------+      +------------------------------------------------+
|db_uint32      next                             |      |volatile  db_uint32    flag                     |
|db_uint32      prev                             |      |volatile   db_uint32   version                  |
|seg_segment_t  seg                              |      |                                                |
+------------------------------------------------+      +------------------------------------------------+

seg_segment_t(224Bytes)
+------------------------------------------------+
|cm_spinlock_t      mutex;                       |
|knl_latch_t        struct_latch;                |
|knl_latch_t        recycle_latch;               |
|cm_spinlock_t      mutex_vacuum;                |
|cm_spinlock_t      mutex_free_size;             |
|cm_spinlock_t      fl_mutex[SEG_FREE_LIST_COUNT]|
|cm_spinlock_t      mutex_rb;                    |
|db_bool            is_index_ddl;                |
|                                                |
|db_page_id         entry;                       |
|db_page_id         first_data_page;             |
|db_page_id         last_page;                   |
|db_uint32          page_count;                  |
|db_page_id         cache_root;                  |
|                                                |
|db_uint32          schema_id;                   |
|db_uint32          obj_id;                      |
|db_char            obj_name[DB_MAX_NAME_LEN];   |
|db_uint8           type;                        |
|                                                |
|                                                |
|                                                |
|                                                |
|db_uint8           space_id;                    |
|                                                |
|db_uint8           pct_free;                    |
|db_uint8           min_list_id;                 |
|                                                |
|                                                |
|db_uint16          create_no;                   |
|db_uint16          free_size;                   |
|db_uint32          del_count;                   |
|db_uint32          row_count;                   |
|db_uint32          gc_time;                     |
|volatile db_uint32 btree_map_flag;              |
|ga_offset_t          btree_map[MAX_MAP_ROOT_NUM]|
|db_uint32            btree_rebuild_on;          |
|volatile db_uint32 btree_map_time;              |
|db_ulong             btree_mem_ctx;             |
|knl_latch_t           btree_mem_latch;          |
|                                                |
|volatile db_uint32 empty_page_count;            |
|volatile db_uint32 stat_last_page_count;        |
|db_uint64              last_segment_free_size;  |
|seg_session_map_t  session_map[1];              |
+------------------------------------------------+


ud_prepare_space(session, op_type, size, ha_type)
    switch(ha_type)
    case:HA_TMP_TYP THEN
        ga_pool_id = GA_TEMP_UNDO_POOL
        obj_id = session->txn.temp_undo_id
    case:HA_PERM_TYP
        ga_pool_id = GA_PERM_UNDO_POOL
        obj_id = session->txn.perm_undo_id
    case:HA_REP_TYP
        ga_pool_id = GA_REP_UNDO_POOL
        obj_id = session->txn.rep_undo_id
    default:
        INVALID

    ud_seg_item_t *item= (ud_seg_item_t*)SGA_OBJECT_ADDR(ga_pool_id, obj_id)
    -->SGA_OBJECT_ADDR((ga_pool_id, obj_id))=
    {
        pool=SGA_GET_POOL(p_id)
        pool->object_addr + (ga_offset_t)pool->def.object_size*(ga_offset_t)o_id
        -->ga_offset_t<-db_ulong
    }

    IF item->seg->free_size >= ud_cost(size)
        return DB_SUCCESS
    FI

    return ud_extend(session, ha_type)





















